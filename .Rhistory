#   mutate(emo_ipv_sev_index2 = apply(select(., ends_with("_scalecenter")), 1,
#                                      mean, na.rm = TRUE) %>%
#            structure(label = "Emo. IPV severity index ever")) %>%
#   mutate(emo_ipv_sev_index2_scalecenter = scale(emo_ipv_sev_index2, center = TRUE, scale = TRUE),
#          emo_ipv_sev_index = ifelse(is.na(emo_ipv_sev_index),emo_ipv_sev_index2_scalecenter,emo_ipv_sev_index),
#          emo_ipv_sev_index = ifelse(is.na(emo_ipv_12m),NA,emo_ipv_sev_index) %>%
#            structure(label = "Emo. IPV severity index")
#          ) %>%
#   select(-ends_with("_scalecenter"))
# Define the variables to include in the IPV severity index
scale_vars = c("ipv8","ipv9","ipv10","ipv11")
# Set the name of the new index variable to be created
curr_ipv = "emo_ipv_sev_index"
lab_curr_ipv = "Emo. IPV severity index"
######################### Tekavoul (Cash Transfer) ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"),
paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(emo_ipv_sev_12m = emo_ipv_12m)
######################### Productive Inclusion ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(emo_ipv_sev_12m = emo_ipv_12m)
################################################################################
######################## Physical violence #####################################
################################################################################
#scale_vars = c("ipv12","ipv13","ipv14","ipv15","ipv16","ipv17")
# Create intensive index variables
#
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(paste0(scale_vars,"b")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(phy_ipv_sev_index = apply(select(., ends_with("_scalecenter")), 1,
#                                      mean, na.rm = TRUE)) %>%
#   mutate(phy_ipv_sev_index = scale(phy_ipv_sev_index, center = TRUE, scale = TRUE)) %>%
#   select(-ends_with("_scalecenter"))
#
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(paste0(scale_vars,"a")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(phy_ipv_sev_index2 = apply(select(., ends_with("_scalecenter")), 1,
#                                       mean, na.rm = TRUE) %>%
#            structure(label = "Phy. IPV severity index Ever")) %>%
#   mutate(phy_ipv_sev_index2_scalecenter = scale(phy_ipv_sev_index2, center = TRUE, scale = TRUE),
#          phy_ipv_sev_index = ifelse(is.na(phy_ipv_sev_index),phy_ipv_sev_index2_scalecenter,phy_ipv_sev_index),
#          phy_ipv_sev_index = ifelse(is.na(phy_ipv_12m),NA,phy_ipv_sev_index) %>%
#            structure(label = "Phy. IPV severity index")
#          ) %>%
#   select(-ends_with("_scalecenter"))
# Define the variables to include in the IPV severity index
scale_vars = c("ipv12","ipv13","ipv14","ipv15","ipv16","ipv17")
# Set the name of the new index variable to be created
curr_ipv = "phy_ipv_sev_index"
lab_curr_ipv = "Phy. IPV severity index"
######################### Tekavoul (Cash Transfer) ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(phy_ipv_sev_12m = phy_ipv_12m)
######################### Productive Inclusion ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(phy_ipv_sev_12m = phy_ipv_12m)
################################################################################
######################## Sexual violence #######################################
################################################################################
#scale_vars = c("ipv18","ipv19","ipv20")
# Create intensive index variables
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(paste0(scale_vars,"b")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(sex_ipv_sev_index = apply(select(., ends_with("_scalecenter")), 1,
#                                      mean, na.rm = TRUE)) %>%
#   mutate(sex_ipv_sev_index = scale(sex_ipv_sev_index, center = TRUE, scale = TRUE)) %>%
#   select(-ends_with("_scalecenter"))
#
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(paste0(scale_vars,"a")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(sex_ipv_sev_index2 = apply(select(., ends_with("_scalecenter")), 1,
#                                       mean, na.rm = TRUE) %>%
#            structure(label = "Sex. IPV severity index Ever")) %>%
#   mutate(sex_ipv_sev_index2_scalecenter = scale(sex_ipv_sev_index2, center = TRUE, scale = TRUE),
#          sex_ipv_sev_index = ifelse(is.na(sex_ipv_sev_index),sex_ipv_sev_index2_scalecenter,sex_ipv_sev_index),
#          sex_ipv_sev_index = ifelse(is.na(sex_ipv_12m),NA,sex_ipv_sev_index) %>%
#            structure(label = "Sex. IPV severity index")
#          ) %>%
#   select(-ends_with("_scalecenter"))
# Define the variables to include in the IPV severity index
scale_vars = scale_vars = c("ipv18","ipv19","ipv20")
# Set the name of the new index variable to be created
curr_ipv = "sex_ipv_sev_index"
lab_curr_ipv = "Sex. IPV severity index"
######################### Tekavoul (Cash Transfer) ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"),
paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(sex_ipv_sev_12m = sex_ipv_12m)
######################### Productive Inclusion ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(sex_ipv_sev_12m = sex_ipv_12m)
##################################################################################
######################## Sexual and Physical violence ############################
##################################################################################
# Define the variables to include in the IPV severity index
scale_vars = scale_vars = c("ipv12","ipv13","ipv14","ipv15","ipv16","ipv17", # Physical
"ipv18","ipv19","ipv20") # Sexual
# Set the name of the new index variable to be created
curr_ipv = "sex_phy_ipv_sev_index"
lab_curr_ipv = "Phy. and sex. IPV severity index"
######################### Tekavoul (Cash Transfer) ####################################
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(sex_phy_ipv_sev_12m = ifelse(sex_ipv_sev_12m==1  |  phy_ipv_sev_12m==1, 1, 0))
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"),
paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv))
######################### Productive Inclusion ####################################
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(sex_phy_ipv_sev_12m = ifelse(sex_ipv_sev_12m==1  |  phy_ipv_sev_12m==1, 1, 0))
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv))
##################################################################################
######################## Economic violence #######################################
##################################################################################
#scale_vars = c("ipv22","ipv23","ipv25")
# Create intensive index variables
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(paste0(scale_vars,"b")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(eco_ipv_sev_index = apply(select(., ends_with("_scalecenter")), 1,
#                                      mean, na.rm = TRUE)) %>%
#   mutate(eco_ipv_sev_index = scale(eco_ipv_sev_index, center = TRUE, scale = TRUE)) %>%
#   select(-ends_with("_scalecenter"))
#
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(paste0(scale_vars,"a")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(eco_ipv_sev_index2 = apply(select(., ends_with("_scalecenter")), 1,
#                                       mean, na.rm = TRUE) %>%
#            structure(label = "Sex. IPV intensity index Ever")) %>%
#   mutate(eco_ipv_sev_index2_scalecenter = scale(eco_ipv_sev_index2, center = TRUE, scale = TRUE),
#          eco_ipv_sev_index = ifelse(is.na(eco_ipv_sev_index),eco_ipv_sev_index2_scalecenter,eco_ipv_sev_index),
#          eco_ipv_sev_index = ifelse(is.na(eco_ipv_12m),NA,eco_ipv_sev_index)%>%
#            structure(label = "Eco. IPV severity index")) %>%
#   select(-ends_with("_scalecenter"))
# Define the variables to include in the IPV severity index
scale_vars = c("ipv22","ipv23","ipv25")
# Set the name of the new index variable to be created
curr_ipv = "eco_ipv_sev_index"
lab_curr_ipv = "Eco. IPV severity index"
######################### Tekavoul (Cash Transfer) ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(eco_ipv_sev_12m = eco_ipv_12m)
######################### Productive Inclusion ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(eco_ipv_sev_12m = eco_ipv_12m)
################################################################################
######################## Any type of violence ##################################
################################################################################
# Create intensive index variables
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(c(paste0(scale_vars,"b"),"ipv1","ipv2","ipv3","ipv5","ipv6","ipv7")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(all_ipv_sev_index = apply(select(., ends_with("_scalecenter")), 1,
#                                     mean, na.rm = TRUE)) %>%
#   mutate(all_ipv_sev_index = scale(all_ipv_sev_index, center = TRUE, scale = TRUE)) %>%
#   select(-ends_with("_scalecenter"))
#
# ipv_df_consent <- ipv_df_consent %>%
#   mutate(across(all_of(c(paste0(scale_vars,"a"),"ipv1","ipv2","ipv3","ipv5","ipv6","ipv7")),
#                 ~scale(., center = TRUE, scale = TRUE),  # Ensure scale() output is a vector
#                 .names = "{.col}_scalecenter")) %>%
#   mutate(all_ipv_sev_index2 = apply(select(., ends_with("_scalecenter")), 1,
#                                       mean, na.rm = TRUE) %>%
#            structure(label = "All type of IPV severity index ever")) %>%
#   mutate(all_ipv_sev_index2_scalecenter = scale(eco_ipv_sev_index2, center = TRUE, scale = TRUE),
#          all_ipv_sev_index = ifelse(is.na(all_ipv_sev_index2),all_ipv_sev_index2_scalecenter,all_ipv_sev_index2),
#          all_ipv_sev_index = ifelse(is.na(ipv_all_12m),NA,all_ipv_sev_index) %>%
#            structure(label = "All type of IPV severity index 12m")) %>%
#   select(-ends_with("_scalecenter")) %>%
#   rename(all_ipv_12m = ipv_all_12m,
#          all2_ipv_12m = ipv_all2_12m)
# Define the variables to include in the IPV severity index
scale_vars = c("ipv8","ipv9","ipv10",
"ipv11","ipv12","ipv13","ipv14","ipv15","ipv16","ipv17",
"ipv18","ipv19","ipv20")
# Set the name of the new index variable to be created
curr_ipv = "all_ipv_sev_index"
lab_curr_ipv = "All type of IPV (excluding Eco.) severity index"
######################### Tekavoul (Cash Transfer) ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_cash <- ipv_df_consent_cash %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_cash %>%
filter(treatment_csh_trnsfr == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(all_ipv_sev_12m = ipv_all_12m)
# Age at marriage
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(age_at_mrrg = as.numeric(mr2))
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(age_at_mrrg_above18 = ifelse(age_at_mrrg > 18, 1, 0))
ipv_df_consent_cash <- ipv_df_consent_cash %>%
mutate(het_age_at_mrrg_above18 = as.factor(age_at_mrrg_above18))
######################### Productive Inclusion ####################################
# Create the IPV severity index as the mean of selected items, handling missing values
ipv_df_consent_pi <- ipv_df_consent_pi %>%
# Compute the row-wise mean of the selected IPV variables
mutate(!!sym(curr_ipv) := apply(select(., paste0(scale_vars,"c")), 1, sum, na.rm = TRUE)) %>%
mutate(!!sym(curr_ipv) := !!sym(curr_ipv)/length(scale_vars)) %>%
# Replace values with 0 if any of the selected variables are 0 for a given row
mutate(!!sym(curr_ipv) := ifelse(rowSums(select(., all_of(c(paste0(scale_vars, "a"), paste0(scale_vars, "b")))) == 0, na.rm = TRUE) > 0 & is.na(!!sym(curr_ipv)), 0,!!sym(curr_ipv)))
# Calculate the global mean of the index among the control groups
mean_glob = mean(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Calculate the global standard deviation of the index among the control groups
std_glob = sd(ipv_df_consent_pi %>%
filter(treatment_pi_pool == "Control") %>%
select(!!sym(curr_ipv)) %>%
pull(), na.rm = TRUE)
# Standardize the IPV index using the global mean and standard deviation, and add a label
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(!!sym(curr_ipv) := ((!!sym(curr_ipv) - mean_glob) / std_glob) %>%
structure(label = lab_curr_ipv)) %>%
# Rename an existing variable (to make sure the source name is correct)
rename(all_ipv_sev_12m = ipv_all_12m)
# Age at marriage
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(age_at_mrrg = as.numeric(mr2))
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(age_at_mrrg_above18 = ifelse(age_at_mrrg > 18, 1, 0))
ipv_df_consent_pi <- ipv_df_consent_pi %>%
mutate(het_age_at_mrrg_above18 = as.factor(age_at_mrrg_above18))
# Renaming the age
ipv_df_consent <- ipv_df_consent %>%
rename(age_ipv_module = age) %>%
mutate(age_ipv_module = age_ipv_module %>%
structure(label = "Age recorded in the IPV module"))
################################################################################
######################## Variables for heterogeneity ###########################
################################################################################
# Filter for phase 2 data (follow-up)
followup_MRT_hh <- allrounds_MRT_hh %>%
filter(phase == 2) %>%
filter(hhid %in% lst_hh)
# ------------------------------------------------------------------------------
# Heterogeneity variables based on baseline characteristics
# ------------------------------------------------------------------------------
# Household head (HHH) is female
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_hhh_fem = as.factor(hhh_fem_bl),      # Binary heterogeneity variable
hhh_fem = as.numeric(hhh_fem_bl))         # Numeric version for continuous analysis
# HHH is literate
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_hhh_lit = as.factor(hhh_lit_bl),
hhh_lit = as.numeric(hhh_lit_bl))
# Primary beneficiary is literate
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_pben_lit = as.factor(pben_lit_bl),
pben_lit = as.numeric(pben_lit_bl))
# Share of beneficiary's savings owned by partner
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_save_share = as.factor(save_share_d),
save_share = as.numeric(save_share_d))
# HHH years of education (above/below median split)
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_hhh_edu = as.factor(ifelse(hhh_edu_bl > median(hhh_edu_bl, na.rm = TRUE), 1, 0)),
hhh_edu = as.numeric(hhh_edu_bl))
# Beneficiary years of education (above/below median split)
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_pben_edu = as.factor(ifelse(pben_edu_bl > median(pben_edu_bl, na.rm = TRUE), 1, 0)),
pben_edu = as.numeric(pben_edu_bl))
# Control over earnings index (above/below median)
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_ctrl_earn_index = as.factor(ifelse(ctrl_earn_index_tr_bl > median(ctrl_earn_index_tr_bl, na.rm = TRUE), 1, 0)),
ctrl_earn_index = as.numeric(ctrl_earn_index_tr_bl))
# Control over household resources index (above/below median)
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_ctrl_hh_index = as.factor(ifelse(ctrl_hh_index_tr_bl > median(ctrl_hh_index_tr_bl, na.rm = TRUE), 1, 0)),
ctrl_hh_index = as.numeric(ctrl_hh_index_tr_bl))
# Intra-household dynamics index (above/below median)
followup_MRT_hh <- followup_MRT_hh %>%
mutate(het_intrahh_index = as.factor(ifelse(intrahh_vars_index_tr_bl > median(intrahh_vars_index_tr_bl, na.rm = TRUE), 1, 0)),
intrahh_index = as.numeric(intrahh_vars_index_tr_bl))
followup_MRT_hh$soc_norms_index
